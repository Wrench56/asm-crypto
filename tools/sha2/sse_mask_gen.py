"""
SSE Mask generator for SHA256
"""

import os


def _generate_load_masks(n: int) -> list[list[int]]:
    masks = []
    for chunk_start in range(0, 64, 16):
        mask = []
        for i in range(16):
            if n > chunk_start + i:
                mask.append(0xFF)
            else:
                mask.append(0x00)
        masks.append(mask)
    return masks


def _generate_insert_masks(n: int) -> list[list[int]]:
    """Each mask has 0xFF only at byte (n % 16) in the corresponding xmm"""
    insert_masks = []
    chunk_index = n // 16
    byte_offset = n % 16
    for i in range(4):
        mask = [0x00] * 16
        if i == chunk_index:
            mask[byte_offset] = 0xFF
        insert_masks.append(mask)
    return insert_masks


def main() -> None:
    """Main function"""
    table_path = '../../src/sha2/sha256_sse_mask_table.inc'
    with open(table_path, 'w', encoding='utf-8') as f:
        f.write('; ===== SSE MASK TABLE FOR PBLENDVB =====\n')
        f.write(f'; Generated by {os.path.basename(__file__)}\n')
        f.write('; DO NOT EDIT MANUALLY!\n\n')
        f.write('%define MASK_LENGTH 16\n')
        f.write('%define MASK_BLOCK_LENGTH 128\n\n')
        f.write('section .data\n\n')
        f.write('mask_table_begin:\n\n')

        for n in range(64):
            f.write(f'; === Masks for n = {n} ===\n')

            masks = _generate_load_masks(n)
            for xmm_index in range(3, 7):
                xmm_mask = masks[xmm_index - 3]
                f.write(f'mask_xmm{xmm_index}_n{n}:\n')
                for j in range(0, 16, 4):
                    bytes_h = ', '.join(f'0x{b:02X}' for b in xmm_mask[j:j+4])
                    f.write(f'    db {bytes_h}\n')

            insert_masks = _generate_insert_masks(n)
            for xmm_index in range(3, 7):
                xmm_mask = insert_masks[xmm_index - 3]
                f.write(f'insert_mask_xmm{xmm_index}_n{n}:\n')
                for j in range(0, 16, 4):
                    bytes_h = ', '.join(f'0x{b:02X}' for b in xmm_mask[j:j+4])
                    f.write(f'    db {bytes_h}\n')

            f.write('\n')
        f.write('; END OF TABLE\n')
    print(f'Mask table generated: {table_path}')


if __name__ == '__main__':
    main()
